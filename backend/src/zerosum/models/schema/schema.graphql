# Following https://github.com/deltaskelta/graphql-go-pets-example

scalar Time

schema {
    query: Query
    mutation: Mutation
}

# The query type, represents all of the entry points into our object graph
type Query {
    user(id: ID!): User
    game(id: ID!): Game
    games(filter: String!, limit: Int, after: String): [Game]!
    gameCount: Int!

    leaderboard(limit: Int!): [User]!
    storeHats(owned: Boolean!): [Hat]!
    achievedHats(): [Hat]!

    # Private, can only get own votes, profile and hats
    profile(): User
    vote(gameId: ID!): Vote
    votes(limit: Int, after: String): [Vote]!
}

# The mutation type, represents all updates we can make to our data
type Mutation {

    # Private, can only mutate own stuff
    # updateUser(user: UserInput!): User
    deleteUser(): Boolean!

    addGame(game: GameInput!): Game

    addVote(vote: VoteInput!): Vote
}
enum GameMode {
    MAJORITY
    MINORITY
}

enum Stakes {
    NO_STAKES
    FIXED_STAKES
    FIXED_LIMIT
    NO_LIMIT
}

type VoteResult {
    win: Boolean
    netChange: Int
}

type OptionResult {
    voteCount: Int
    totalValue: Int
    winner: Boolean
}

type Game {
    id: ID!
    owner: User
    topic: String
    startTime: Time
    endTime: Time
    totalMoney: Int
    gameMode: GameMode
    stakes: Stakes
    voted: Boolean
    resolved: Boolean
    options: [Option]
    #participants: [User]
}

type Hat {
    id: ID!
    name: String!
    price: Int!
    img: String!
}

type Option {
    id: ID!
    body: String
    result: OptionResult
}

type User {
    id: ID!
    name: String
    money: Int
    gamesCreated: [Game]
    gamesParticipated: [Game]
    winRate: Float
    level: Int
    expProgress: Float
    #other deets
}

type Vote {
    game: Game
    option: Option
    money: Int
    resolved: Boolean
    result: VoteResult
}

input UserInput {
    #deets
}

input GameInput {
    topic: String!
    duration: Int!
    gameMode: GameMode!
    stakes: Stakes!
    options: [String!]!
}

input VoteInput {
    gameId: ID!
    optionId: ID!
    amount: Int!
}
