# Following https://github.com/deltaskelta/graphql-go-pets-example

schema {
    query: Query
    mutation: Mutation
}

# The query type, represents all of the entry points into our object graph
type Query {
    getUser(id: ID!): User
    getGame(id: ID!): Post
    getGames(filter: String!, limit: Int, after: String): Post

    # Private, can only get own votes
    getVote(gameId: ID!): Vote
    getVotes(limit: Int, after: String): [Vote]
}

# The mutation type, represents all updates we can make to our data
type Mutation {

    # Private, can only mutate own stuff
    createUser(user: UserInput!): User
    updateUser(user: UserInput!): User
    deleteUser(): Boolean

    addGame(game: GameInput!): Game

    addVote(vote: VoteInput!): Vote
}

enum GameMode {
    MAJORITY
    MINORITY
}

enum Stakes {
    NO_STAKES
    FIXED_STAKES
    FIXED_LIMIT
    NO_LIMIT
}

type GameResult {
    option: Option
    votes: Int
}

type VoteResult {
    win: Boolean
    netChange: Int
}

# what is needed for a game
type Game {
    id: ID
    owner: User
    topic: String
    startTime: Date
    endTime: Date
    totalMoney: Date
    gameMode: GameMode
    stakes: Stakes
    options: [Option]
    participants: [User]
    result: [GameResult]
}

# what is needed for a game summary
type GameSummary {
    id: ID
    owner: User
    title: String
    startTime: Date
    endTime: Date
    totalMoney: Date
    gameMode: GameMode
    stakes: Stakes
    result: [GameResult]
}

# what is needed for a user
type User {
    id: ID
    money: Int
    gamesCreated: [GameSummary]
    gamesParticipated: [GameSummary]
    #other deets
}

# what is needed for a vote
type Vote {
    gameId: ID
    optionId: Id
    money: Int
    result: VoteResult
}

type UserInput {
    #deets
}

type OptionInput {
    body: String!
}

type GameInput {
    topic: String
    duration: Int
    gameMode: GameMode
    stakes: Stakes
    options: [OptionInput!]!
}

type VoteInput {
    gameId: ID
    optionId: ID
    amount: Int
}
